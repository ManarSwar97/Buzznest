
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        /* Custom styles */
        .modal-content {
            border-radius: 10px;
        }
        .modal-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        .form-group {
            margin-bottom: 1rem;
        }
        .form-group label {
            font-weight: 500;
        }
        #imagePreview {
            max-width: 100%;
            max-height: 200px;
            margin-top: 10px;
            display: none;
        }
        .username-link {
            color: inherit;
            text-decoration: none;
            transition: color 0.2s;
        }
        .username-link:hover {
            color: #0d6efd;
            text-decoration: underline;
        }
        /* Like button styles */
        .like-btn {
            transition: all 0.2s;
            margin-right: 10px;
        }
        .like-btn:hover {
            transform: scale(1.05);
        }
        .bi-heart-fill {
            color: #dc3545;
        }
        /* Comments styling */
        .comments-container {
            max-height: 400px;
            overflow-y: auto;
        }
        .comment {
            background-color: #f8f9fa;
            border-radius: 5px;
        }
        .comment .card-body {
            padding: 0.5rem;
        }
        .comment-form .input-group {
            margin-bottom: 1rem;
        }
        .spinner-border {
            display: inline-block;
            width: 1rem;
            height: 1rem;
            vertical-align: text-bottom;
            border: 0.15em solid currentColor;
            border-right-color: transparent;
            border-radius: 50%;
            animation: spinner-border .75s linear infinite;
        }
        @keyframes spinner-border {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <%- include('../navbar/_navbar.ejs')%>
    <div class="container mt-4">
        <div class="card">
            <% if (groupSingle.groupImage) { %>
                <img src="/uploads/<%= groupSingle.groupImage %>" class="card-img-top" alt="<%= groupSingle.groupName %>">
            <% } %>

            <div class="card-body">
                <h2 class="card-title"><%= groupSingle.groupName %></h2>

                <% if (groupSingle.user) { %>
                    <h5 class="card-subtitle mb-2 text-muted">
                        Created by <a href="/auth/profile/<%= groupSingle.user._id %>" class="username-link"><%= groupSingle.user.username %></a>
                    </h5>
                <% } %>

                <% if (groupSingle.game) { %>
                    <p class="card-text">
                        Game: <%= groupSingle.game %>
                    </p>
                <% } %>

                <form action="/group/<%= groupSingle._id %>?_method=DELETE" method="POST">
                    <button type="submit" class="btn btn-danger">Delete Group</button>
                    <a href="/group" class="btn btn-secondary">Back to Groups</a>
                </form>
            </div>
        </div>

        <button type="button" class="btn btn-primary mt-4" data-bs-toggle="modal" data-bs-target="#createPostModal">
            Create New Post
        </button>

        <div class="container mt-4">
            <h3>Group Posts</h3>

            <% if (posts && posts.length > 0) { %>
                <% posts.forEach(post => { %>
                    <div class="card mb-3" id="post-<%= post._id %>">
                        <div class="card-body">
                            <div class="post-header d-flex align-items-center mb-3">
                                <% if (post.user && post.user.image) { %>
                                    <img src="/uploads/<%= post.user.image %>" class="rounded-circle me-3" width="50" height="50">
                                <% } %>
                                <h5 class="mb-0">
                                    <a href="/auth/profile/<%= post.user._id %>" class="username-link">@<%= post.user.username %></a>
                                </h5>
                            </div>
                            <h5 class="card-title"><%= post.postTitle %></h5>
                            <p class="card-text"><%= post.postText %></p>
                            <% if (post.postImage) { %>
                                <img src="/uploads/<%= post.postImage %>" class="img-fluid rounded" alt="Post Image">
                            <% } %>
                            
                            <div class="mt-3 d-flex align-items-center">
                                <button class="btn btn-outline-primary like-btn" 
                                        data-post-id="<%= post._id %>"
                                        id="like-btn-<%= post._id %>">
                                    <i class="bi bi-heart"></i> 
                                    <span class="like-count"><%= post.likes?.count || 0 %></span>
                                </button>
                                
                                <button class="btn btn-outline-secondary ms-2 comment-toggle-btn"
                                        data-post-id="<%= post._id %>">
                                    <i class="bi bi-chat"></i> Comment
                                </button>

                                <% if (post.user._id.equals(currentUser._id)) { %>
                                    <form action="/posts/<%= post._id %>?_method=DELETE" method="POST" class="d-inline ms-auto">
                                        <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                                    </form>
                                    <button type="button" class="btn btn-secondary btn-sm ms-2" data-bs-toggle="modal" data-bs-target="#editPostModal<%= post._id %>">
                                        Edit
                                    </button>
                                <% } %>
                            </div>

                            <div class="comments-section mt-3" id="comments-section-<%= post._id %>" style="display: none;">
                                <form class="mb-3 comment-form" data-post-id="<%= post._id %>">
                                    <div class="input-group">
                                        <input type="text" name="text" class="form-control comment-input" placeholder="Add a comment..." required>
                                        <button class="btn btn-primary" type="submit">Post</button>
                                    </div>
                                </form>
                                
                                <div class="comments-container" id="comments-<%= post._id %>">
                                    <% if (post.comments && post.comments.length > 0) { %>
                                        <% post.comments.forEach(comment => { %>
                                            <div class="card mb-2 comment" data-comment-id="<%= comment._id %>">
                                                <div class="card-body p-2">
                                                    <div class="d-flex align-items-center">
                                                        <% if (comment.user && comment.user.image) { %>
                                                            <img src="/uploads/<%= comment.user.image %>" class="rounded-circle me-2" width="32" height="32">
                                                        <% } %>
                                                        <div class="flex-grow-1">
                                                            <h6 class="mb-0">
                                                                <a href="/auth/profile/<%= comment.user._id %>" class="username-link">
                                                                    @<%= comment.user.username %>
                                                                </a>
                                                            </h6>
                                                            <p class="mb-0"><%= comment.text %></p>
                                                            <small class="text-muted">
                                                                <%= new Date(comment.createdAt).toLocaleString() %>
                                                            </small>
                                                        </div>
                                                        <% if ((comment.user && comment.user._id.equals(currentUser._id)) || 
                                                                (post.user && post.user._id.equals(currentUser._id))) { %>
                                                            <button class="btn btn-sm btn-outline-danger delete-comment-btn">Delete</button>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }); %>
                                    <% } else { %>
                                        <p class="text-muted">No comments yet.</p>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal fade" id="editPostModal<%= post._id %>" tabindex="-1" aria-labelledby="editPostModalLabel<%= post._id %>" aria-hidden="true">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editPostModalLabel<%= post._id %>">Edit Post</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <form action="/posts/<%= post._id %>?_method=PUT" method="POST" enctype="multipart/form-data">
                                    <div class="modal-body">
                                        <input type="hidden" name="groupId" value="<%= groupSingle._id %>">

                                        <div class="form-group mb-3">
                                            <label for="editPostTitle<%= post._id %>" class="form-label">Post Title</label>
                                            <input type="text" class="form-control" id="editPostTitle<%= post._id %>" name="postTitle" value="<%= post.postTitle %>" required>
                                        </div>

                                        <div class="form-group mb-3">
                                            <label for="editPostText<%= post._id %>" class="form-label">Description</label>
                                            <textarea class="form-control" id="editPostText<%= post._id %>" name="postText" rows="5" required><%= post.postText %></textarea>
                                        </div>

                                        <div class="form-group mb-3">
                                            <label for="editPostImage<%= post._id %>" class="form-label">Image</label>
                                            <input type="file" class="form-control" id="editPostImage<%= post._id %>" name="postImage" onchange="previewEditImage(this, '<%= post._id %>')">
                                            <% if (post.postImage) { %>
                                                <img id="editImagePreview<%= post._id %>" src="/uploads/<%= post.postImage %>" class="img-thumbnail mt-2" alt="Current Post Image" style="max-width: 100%; max-height: 200px;">
                                            <% } else { %>
                                                <img id="editImagePreview<%= post._id %>" class="img-thumbnail mt-2" alt="Image preview" style="max-width: 100%; max-height: 200px; display: none;">
                                            <% } %>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        <button type="submit" class="btn btn-primary">Save Changes</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="alert alert-info">No posts in this group yet.</div>
            <% } %>
        </div>
    </div>

    <div class="modal fade" id="createPostModal" tabindex="-1" aria-labelledby="createPostModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createPostModalLabel">Create New Post</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form action="/posts" method="POST" enctype="multipart/form-data">
                    <div class="modal-body">
                        <input type="hidden" name="groupId" value="<%= groupSingle._id %>">

                        <% if (typeof error !== 'undefined' && error) { %>
                            <div class="alert alert-danger">
                                <%= error %>
                            </div>
                        <% } %>

                        <div class="form-group mb-3">
                            <label for="postTitle" class="form-label">Post Title</label>
                            <input type="text" class="form-control" id="postTitle" name="postTitle" required>
                        </div>

                        <div class="form-group mb-3">
                            <label for="postText" class="form-label">Description</label>
                            <textarea class="form-control" id="postText" name="postText" rows="5" required></textarea>
                        </div>

                        <div class="form-group mb-3">
                            <label for="postImage" class="form-label">Image</label>
                            <input type="file" class="form-control" id="postImage" name="postImage"
                                   onchange="previewImage(this)">
                            <img id="imagePreview" class="img-thumbnail" alt="Image preview" style="max-width: 100%; max-height: 200px; display: none;">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Create Post</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Image preview functionality
        function previewImage(input) {
            const preview = document.getElementById('imagePreview');
            const file = input.files[0];

            if (file) {
                const reader = new FileReader();

                reader.onload = function(e) {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                }

                reader.readAsDataURL(file);
            } else {
                preview.style.display = 'none';
            }
        }

        function previewEditImage(input, postId) {
            const preview = document.getElementById(`editImagePreview${postId}`);
            const file = input.files[0];

            if (file) {
                const reader = new FileReader();

                reader.onload = function(e) {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                }

                reader.readAsDataURL(file);
            } else {
                const existingImageSrc = preview.getAttribute('src');
                if (!existingImageSrc || existingImageSrc === '/post/undefined') {
                    preview.style.display = 'none';
                } else {
                    preview.style.display = 'block';
                }
            }
        }

        // Like functionality
        function updateLikeButton(postId, isLiked, likesCount) {
            const btn = document.getElementById(`like-btn-${postId}`);
            btn.classList.toggle('btn-outline-primary', !isLiked);
            btn.classList.toggle('btn-primary', isLiked);
            btn.innerHTML = `<i class="bi bi-heart${isLiked ? '-fill' : ''}"></i> <span class="like-count">${likesCount}</span>`;
        }

        // Comment functionality
        function addCommentToUI(postId, comment) {
            const commentsContainer = document.getElementById(`comments-${postId}`);
            
            // Remove "No comments yet." if it exists
            const noCommentsParagraph = commentsContainer.querySelector('p.text-muted');
            if (noCommentsParagraph) {
                noCommentsParagraph.remove();
            }

            const commentDate = new Date(comment.createdAt || new Date()).toLocaleString();
            
            const commentHtml = `
                <div class="card mb-2 comment" data-comment-id="${comment._id}">
                    <div class="card-body p-2">
                        <div class="d-flex align-items-center">
                            ${comment.user && comment.user.image ? 
                                `<img src="/uploads/${comment.user.image}" class="rounded-circle me-2" width="32" height="32">` : ''}
                            <div class="flex-grow-1">
                                <h6 class="mb-0">
                                    <a href="/auth/profile/${comment.user._id}" class="username-link">
                                        @${comment.user.username}
                                    </a>
                                </h6>
                                <p class="mb-0">${comment.text}</p>
                                <small class="text-muted">${commentDate}</small>
                            </div>
                            <button class="btn btn-sm btn-outline-danger delete-comment-btn" data-comment-id="${comment._id}">Delete</button>
                        </div>
                    </div>
                </div>
            `;
            
            commentsContainer.insertAdjacentHTML('afterbegin', commentHtml);
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Toggle comments section
            document.querySelectorAll('.comment-toggle-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const postId = btn.dataset.postId;
                    const commentsSection = document.getElementById(`comments-section-${postId}`);
                    commentsSection.style.display = commentsSection.style.display === 'none' ? 'block' : 'none';
                });
            });

            // Initialize like buttons
            document.querySelectorAll('.like-btn').forEach(btn => {
                const postId = btn.dataset.postId;
                
                // Fetch initial like status
                fetch(`/posts/${postId}/like-status`)
                    .then(res => res.json())
                    .then(data => {
                        const likeCount = btn.querySelector('.like-count').textContent; // Keep current count from EJS for initial display
                        updateLikeButton(postId, data.isLiked, data.likesCount !== undefined ? data.likesCount : likeCount); // Use fetched count if available, else EJS count
                    })
                    .catch(err => console.error('Error fetching like status:', err));
                
                // Add click handler
                btn.addEventListener('click', () => {
                    fetch(`/posts/${postId}/like`, { 
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            updateLikeButton(postId, data.isLiked, data.likesCount);
                        } else {
                            alert('Failed to like/unlike post: ' + (data.error || 'Unknown error'));
                        }
                    })
                    .catch(err => console.error('Error liking/unliking post:', err));
                });
            });

            // Submit comment
            document.querySelectorAll('.comment-form').forEach(form => {
                form.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const postId = form.dataset.postId;
                    const input = form.querySelector('.comment-input');
                    const text = input.value.trim();
                    
                    if (!text) return;
                    
                    try {
                        const submitBtn = form.querySelector('button[type="submit"]');
                        submitBtn.disabled = true;
                        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Posting...';
                        
                        const response = await fetch(`/posts/${postId}/comments`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ text })
                        });
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            addCommentToUI(postId, data.comment);
                            input.value = '';
                        } else {
                            alert('Failed to post comment: ' + (data.error || 'Unknown error'));
                        }
                    } catch (error) {
                        console.error('Error posting comment:', error);
                        alert('Error posting comment. Please try again.');
                    } finally {
                        const submitBtn = form.querySelector('button[type="submit"]');
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Post';
                    }
                });
            });
            
            // Delete comment
            document.addEventListener('click', async (e) => {
                if (e.target.classList.contains('delete-comment-btn')) {
                    const commentCard = e.target.closest('.comment');
                    const commentId = commentCard.dataset.commentId;
                    // Find the closest parent post card to get the postId
                    const postId = e.target.closest('.card[id^="post-"]').id.replace('post-', '');
                    
                    if (confirm('Are you sure you want to delete this comment?')) {
                        try {
                            const response = await fetch(`/posts/${postId}/comments/${commentId}`, {
                                method: 'DELETE'
                            });
                            
                            const data = await response.json();
                            
                            if (data.success) {
                                commentCard.remove();
                                const commentsContainer = document.getElementById(`comments-${postId}`);
                                if (commentsContainer.querySelectorAll('.comment').length === 0) {
                                    commentsContainer.innerHTML = '<p class="text-muted">No comments yet.</p>';
                                }
                            } else {
                                alert('Failed to delete comment: ' + (data.error || 'Unknown error'));
                            }
                        } catch (error) {
                            console.error('Error deleting comment:', error);
                            alert('Error deleting comment. Please try again.');
                        }
                    }
                }
            });
        });
    </script>
</body>
</html>
